Многоканальный модуль дискретного вывода для Arduino с UART интерфейсом.
Приложение может быть построено для работы в режиме вывода программного
ШИМ либо в режиме управления сервоприводами. Блок безопасности позволяет 
при потере связи с ведущим устройством подать на выход заранее установленное значение. 
Количество каналов задается статически и ограничено объемом памяти микроконтроллера.
1 Установка
1.1 Требования
Для работы в режиме вывода программного ШИМ используются стандартные библиотеки Arduino,
установка дополнительных библиотек не требуется; Для работы в режиме управления сервоприводами 
требуется библиотека Servo.h.
1.2 Настройки перед построением приложения:
Там, где есть метка "-user_config:", можно редактировать исходный код.
файл ./app.h:
	общие настройки
файл ./app/config.h:
	параметры по умолчанию для приложения;
файл ./app/config.c:
	параметры по умолчанию для приложения;
файл ./model/channel.h:
	параметры по умолчанию для каналов.
файл ./model/channel.c:
	параметры по умолчанию для каналов.
2 Использование
Интерфейс пользователя включает в себя кнопку сброса приложения и UART-сервер, 
принимающий команды для управления приложением. Для того, чтобы установить 
настройки по умолчанию, нужно при перезагрузке удерживать кнопку сброса
приложения, подключенную к DEFAULT_CONTROL_PIN (./app.h). Если после перезагрузки
микроконтроллера, горит светодиод, подключенный к INDICATOR_PIN (./app.h), то
произошла ошибка.
2.1 Управление приложением через UART.
Несколько UART микроконтроллера могут быть настроены для работы в режиме сервера, тогда
на эти UART можно будет отправлять команды для управления приложением.
Приложение ведет себя в сети как ведомое. Все поддерживаемые команды
можно найти в файле ./app/server_config.c (функция acpls_buildNodes()).
Приложение настраивает последовательный порт в соотвествии с параметрами, хранящимися в ПЗУ.
Запросы и ответы представляют собой текстовые строки в формате:
<команда;идентификатор;данные;контрольнаяСумма>
	, где:
		< - начало пакета,
		; - разделитель,
		> - конец пакета.
В зависимости от команды, в качестве идентификатора может выступать номер канала, номер приложения.
Для избежания конфликтов, идентификаторы должны быть уникальными
в пределах одной сети.
Чтобы иметь возможность отправлять запросы устройству через Arduino Serial Monitor, нужно отключить
проверку контрольной суммы, установив в 0 константу ACP_CHECK_CRC в файле ./acp/main.h.
Примеры команд:
	для канала приложения с идентификатором 1:
		запустить канал:
		<cst;1;?>
		получить из ОЗУ задание:
		<grcgoal;1;?>
		установить задание равным 150,0 единиц:
		<scgoal;1;150.0;?>
Все команды, поддерживаемые приложением можно найти в файле ./acp/loop/server_config.c функция acpls_buildNodes().
2.2. Управление с помощью Arduino терминала.
Приложение aui для плат Arduino позволяет платам подключаться по последовательному интерфейсу к данному приложению,
редактировать параметры и просматривать значения переменных в реальном времени.
2.3. Управление с помощью ПК.
Приложение qwst для POSIX совместимых ОС связывает последовательные порты терминала с 
интернетом, а приложение для веб-браузера wui позволяет пользователю взаимодействовать
с данным приложением.

